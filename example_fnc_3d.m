%EXAMPLE_FNC_3D Evaluation of 3-D box spline.
% Evaluates a three-dimensional box spline. Since the domain has dimension 3,
% the mask coefficients will be provided by an `n*n*n` matrix, where the number
% of entries in each dimension, `n`, is chosen to be 5 here.
%
% See also: EXAMPLE_FNC_1D_BSPLINE, EXAMPLE_FNC_1D_DAUB3, EXAMPLE_FNC_2D.
% REFINE.
%
% ----------------------------------------------------------------------------
% Author:    Johann Rudi <johann@ices.utexas.edu>
% ----------------------------------------------------------------------------

%% Set MATLAB Environment

% clearing
clear

% initialize refine
refine_init


%% Set Parameters

% set mask coefficients
mask = zeros(5, 5, 5);
mask(1,:,:) = [
    0.0625  0.0625  0.0     0.0     0.0    ; ...
    0.0625  0.125   0.0625  0.0     0.0    ; ...
    0.0     0.0625  0.0625  0.0     0.0    ; ...
    0.0     0.0     0.0     0.0     0.0    ; ...
    0.0     0.0     0.0     0.0     0.0    ...
];
mask(2,:,:) = [
    0.0625  0.125   0.0625  0.0     0.0    ; ...
    0.125   0.3125  0.25    0.0625  0.0    ; ...
    0.0625  0.25    0.3125  0.125   0.0    ; ...
    0.0     0.0625  0.125   0.0625  0.0    ; ...
    0.0     0.0     0.0     0.0     0.0    ...
];
mask(3,:,:) = [
    0.0     0.0625  0.0625  0.0     0.0    ; ...
    0.0625  0.25    0.3125  0.125   0.0    ; ...
    0.0625  0.3125  0.5     0.3125  0.0625 ; ...
    0.0     0.125   0.3125  0.25    0.0625 ; ...
    0.0     0.0     0.0625  0.0625  0.0    ...
];
mask(4,:,:) = [
    0.0     0.0     0.0     0.0     0.0    ; ...
    0.0     0.0625  0.125   0.0625  0.0    ; ...
    0.0     0.125   0.3125  0.25    0.0625 ; ...
    0.0     0.0625  0.25    0.3125  0.125  ; ...
    0.0     0.0     0.0625  0.125   0.0625 ...
];
mask(5,:,:) = [
    0.0     0.0     0.0     0.0     0.0    ; ...
    0.0     0.0     0.0     0.0     0.0    ; ...
    0.0     0.0     0.0625  0.0625  0.0    ; ...
    0.0     0.0     0.0625  0.125   0.0625 ; ...
    0.0     0.0     0.0     0.0625  0.0625 ...
];

% set derivative vector (number of columns = dimension of function's domain)
deriv = [0 0 0];

% set number of refine steps s.t. we only evaluate at integer nodes
numRefineSteps = 0;


%% Compute Function Evaluation

% evaluate refinable function
[x,y] = refine(mask, deriv, numRefineSteps, 'Display','on');

